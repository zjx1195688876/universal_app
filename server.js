const Koa = require('koa');
const app = new Koa();
const fs = require('fs');
const path = require('path');
const LRU = require('lru-cache');
const { createBundleRenderer } = require('vue-server-renderer');
// const createApp = require('./instance');

const ROOT_PATH = path.resolve(__dirname, './');
const templatePath = path.join(ROOT_PATH, '/src/template/index.html');
// const template =  fs.readFileSync(path.join(ROOT_PATH, '/src/template/index.html'), 'utf-8');
const isProd = process.env.NODE_ENV === 'production';

const createRenderer = (bundle) => {
    // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    const result = createBundleRenderer(bundle, {
        // cache: LRU({
        //     max: 1000,
        //     maxAge: 1000 * 60 * 15
        // }),
        runInNewContext: false
    });
    return result;
};

let renderer;
let readyPromise;
if (isProd) {
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const template = fs.readFileSync(templatePath, 'utf-8');
    const bundle = require('./dist/vue-ssr-server-bundle.json');
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require('./dist/vue-ssr-client-manifest.json');
    renderer = createRenderer(bundle, {
        template,
        clientManifest
    });
} else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise = require('./build/setup-dev-server')(
        app,
        templatePath,
        (bundle) => {
            renderer = createRenderer(bundle);
        }
    );
};

const render = (ctx) => {
    const s = Date.now();

    const context = {
        title: 'this is title',
    };
    renderer.renderToString(context, (err, html) => {
        console.log('err: ', err);
        console.trace();
        if (err) {
            ctx.body = '未知错误';
        } else {
            ctx.body = html;
        }
        if (!isProd) {
            console.log(`whole request: ${Date.now() - s}ms`)
        }
    });
};

app.use(async ctx => {
    isProd
    ? render(ctx)
    : readyPromise.then(() => render(ctx))
});

app.listen(3000);

// 原来的
// const createApp = require('/path/to/built-server-bundle.js');

// server.get('*', (req, res) => {
//     const context = { url: req.url };

//     createApp(context).then(app => {
//         renderer.renderToString(app, (err, html) => {
//             if (err) {
//                 if (err.code === 404) {
//                     res.status(404).end('Page not found');
//                 } else {
//                     res.status(500).end('Internal Server Error');
//                 }
//             } else {
//                 res.end(html);
//             }
//         });
//     });
// });
